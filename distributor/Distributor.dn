const char debugMSG[]	  = "[@Distributor]"

const char HELP[]      = "help"
const char ALTERNATE[] = "alternate"
const char PROPAGATE[] = "propagate"
const char SHARDING[]  = "sharding"
const char LOCAL[]     = "local"
const char EXIT[]      = "exit"

component provides App requires io.Output out, data.StringUtil strUtil, data.IntUtil iu, io.Input in, 
	composition.Assembly assembly {

	String remoteConfigs[] 		= null
	String localConfigs[] 		= null
	String distributedProxies[] = null

	void help() {
		out.println("Command list:")
		out.println(" $(HELP) - to list all commands")
		out.println(" $(ALTERNATE) - to distribute list alternating requests between replicas")
		out.println(" $(PROPAGATE) - to distribute list propagating write requests to all replicas")
		out.println(" $(SHARDING) - to distribute list with sharding")
		out.println(" $(LOCAL) - to bring list locally")
		out.println(" $(EXIT) - to finish execution")
	}

	void local() {
		assembly.setConfig(localConfigs[0].string)
		out.println("$(debugMSG) Local composition running.")
	}

	void distribute(char proxyInterface[]) {
		char remoteConfig[] = getRemoteConfig("data/adt/$(proxyInterface)")
		if (remoteConfig != null) {	
			assembly.setConfig(remoteConfig)
			out.println("$(debugMSG) Remote composition [($proxyInterface)] running.")	
		} else {
			throw new Exception("Something went wrong! Couldn't find remote proxy.")
		}
	}

	void commandInterpret(char cmd[]) {
		String cmdList[] = strUtil.explode(cmd, " ")
		if (cmdList.arrayLength == 1) {
			if (cmd == HELP) {
				help()
			} else if (cmd == PROPAGATE) {
				distribute("ListCPPropagate.o")
			} else if (cmd == ALTERNATE) {
				distribute("ListCPAlternate.o")
			} else if (cmd == SHARDING) {
				distribute("ListCPSharding.o")
			} else if (cmd == LOCAL) {
				local()
			} else {
				out.println("Invalid command.")
			}
		}
	}

	char[] getRemoteConfig(char proxy[]) {
		for (int pointer = 0; pointer < remoteConfigs.arrayLength; pointer++) {
			if (strUtil.find(remoteConfigs[pointer].string, proxy) != StringUtil.NOT_FOUND) {
				return remoteConfigs[pointer].string
			}
		}
		return null
	}

	// Guess there's a better way of doing this...
	void remoteLocalSeparation() {
		if ((remoteConfigs == null) || (localConfigs == null)) {
			out.println("$(debugMSG) Separating local and remote compositions...")
			String configs[] = assembly.getAllConfigs()
			for (int confPointer = 0; confPointer < configs.arrayLength; confPointer++) {
				bool remote = false
				for (int distProxy = 0; distProxy < distributedProxies.arrayLength; distProxy++) {
					if (strUtil.find(configs[confPointer].string, distributedProxies[distProxy].string) 
						!= StringUtil.NOT_FOUND) {
						remoteConfigs = new String[](remoteConfigs, configs[confPointer])
						remote = true
						break
					}
				}
				if (!remote) {
					localConfigs = new String[](localConfigs, configs[confPointer])
				}
			}
		}
	}

	// TODO: dynamically load the names of distributed proxies from the folder distributor/data/adt/
	// currently hard-coded 
	void loadDistributedProxies() {
		if (distributedProxies == null) {
			distributedProxies = new String[](
				new String("ListCPPropagate.o"),
				new String("ListCPAlternate.o"),
				new String("ListCPSharding.o"))
		}
	}

	int App:main(AppParam params[]) {
		/* Load target system */
		assembly.setMain("../server/main.o", null)
		loadDistributedProxies()
		remoteLocalSeparation()
		local()

		/* command prompt */
		char cmd[] = "start"
		while (cmd != "exit") {
			if (cmd != "start") { commandInterpret(cmd)	}
			out.print("distributor> ")
			cmd = in.readln()
		}
		return 0
	}
}
